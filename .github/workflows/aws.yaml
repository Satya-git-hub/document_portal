# .github/workflows/aws.yml
name: CI/CD to ECS Fargate
on:
  workflow_run:
    workflows: ["Run Unit Tests"]   # Match the name in your ci.yaml
    types:
      - completed
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: document_portal_repo
  ECS_SERVICE: document-portal-service
  ECS_CLUSTER: document-portal-cluster
  ECS_TASK_DEFINITION: .github/workflows/task_definition.json
  CONTAINER_NAME: document-portal-container
  APP_PORT: 8080

permissions:
  id-token: write
  contents: read

jobs:
  check-status:
    runs-on: ubuntu-latest
    if: ${{github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master'}}
    steps:
      - name: CI passed on master branch
        run: echo "Unit tests passed. Proceeding with build & deploy."

  # -------------------------------
  # 1. Build & Push Docker Image
  # -------------------------------
  build-and-push:
    name: Build & Push Docker Image
    needs: [check-status]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  # -------------------------------
  # 2. Deploy to ECS
  # -------------------------------
  deploy:
    name: Deploy to ECS Fargate
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Render Task Definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}
      - name: Print Rendered Task
        run: cat ${{ steps.render-task.outputs.task-definition }}
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - run: echo "Deployment to ECS Fargate completed."

  post-deployment-tests:
    name: Run Post-Deployment Smoke Tests
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch ECS Task Public IP
        id: get_ip
        run: |
          set -euo pipefail

          CLUSTER_NAME="${{ env.ECS_CLUSTER }}"
          SERVICE_NAME="${{ env.ECS_SERVICE }}"
          PORT="${{ env.APP_PORT }}"

          echo "Waiting for ECS task to be in RUNNING state..."
          for i in {1..10}; do
            TASK_ARN=$(aws ecs list-tasks \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --desired-status RUNNING \
              --query 'taskArns[0]' \
              --output text)

            if [ "$TASK_ARN" != "None" ]; then
              echo "Found running task: $TASK_ARN"
              break
            fi
            echo "No running task yet. Retrying in 15s..."
            sleep 15
          done

          if [ "$TASK_ARN" == "None" ] || [ -z "$TASK_ARN" ]; then
            echo "ERROR: No running ECS task found after retries."
            exit 1
          fi

          ENI_ID=$(aws ecs describe-tasks \
            --cluster "$CLUSTER_NAME" \
            --tasks "$TASK_ARN" \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)

          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids "$ENI_ID" \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)

          echo "ECS_APP_URL=http://${PUBLIC_IP}:${PORT}" >> $GITHUB_ENV
          echo "Public IP: ${PUBLIC_IP}"

      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: pip install pytest requests

      - name: Run Smoke Tests
        run: |
          pytest tests/test_post_deployment.py -m smoke -v --maxfail=1 --disable-warnings

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "Smoke tests failed. Stopping running tasks..."
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0